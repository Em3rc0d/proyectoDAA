/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto_daa.Paneles;

import java.util.List;
import proyecto_daa.Entidades.Medico;
import proyecto_daa.Entidades.Paciente;
import proyecto_daa.Entidades.UsuarioActual;
import proyecto_daa.Gestionadores.*;
import proyecto_daa.ManejadorAchivos.ManejoArchivos;
import proyecto_daa.Nodos.NodoCitaMedica;


/**
 *
 * @author farid
 */
public class panelCitasPendientes extends javax.swing.JFrame {

    GestionadorMedico arbolMedico = new GestionadorMedico();
    GestionadorCitaMedica arbolCitaMedica = new GestionadorCitaMedica();
    
    public panelCitasPendientes() {
        initComponents();
        setLocationRelativeTo(null);
        //arbolMedico = ManejoArchivos.cargarArbol("arbolMedicos.txt", arbolMedico);
        arbolCitaMedica = ManejoArchivos.cargarArbol("arbolCitas.txt", arbolCitaMedica);
        //agregarMedicosALista();
        mostrarCitas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMedico = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnShow = new javax.swing.JButton();
        txtMedicoActual = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(192, 206, 161));

        txtMedico.setColumns(20);
        txtMedico.setRows(5);
        jScrollPane1.setViewportView(txtMedico);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Listado de Citas Pendientes");
        jLabel1.setToolTipText("");
        jLabel1.setFocusable(false);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setVerifyInputWhenFocusTarget(false);

        jLabel2.setText("MÈdico:");

        btnBack.setText("Retornar");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnShow.setText("Mostrar");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        txtMedicoActual.setText("MedicoActual");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMedicoActual)
                        .addGap(77, 77, 77))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(btnShow))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMedicoActual))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnShow)
                        .addGap(111, 111, 111))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        new panelMedico().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
//        int idMedico = obtenerIdMedicoSeleccionado();
//        List<NodoCitaMedica> resultados = arbolCitaMedica.buscarTodosPorIdMedico(idMedico);
//        String cadena = "";
//        for (NodoCitaMedica nodo : resultados) {
//            Paciente paciente = nodo.CitaMedica.getPaciente();
//            cadena += paciente.getNombre() + " " + paciente.getApellido() + " - Horario: " + nodo.CitaMedica.getHorario() + "\n";
//        }
//        txtMedico.setText(cadena);

    }//GEN-LAST:event_btnShowActionPerformed

    private void mostrarCitas(){
        // Obtener el usuario actual desde el singleton
        UsuarioActual<?> usuarioActual = UsuarioActual.getInstance();
        Medico medico = (Medico) usuarioActual.getUsuarioActual();

        txtMedicoActual.setText(medico.nombre + " " + medico.apellido);
        
        // Obtener las citas pendientes del mÈdico
        List<NodoCitaMedica> citasPendientes = arbolCitaMedica.buscarTodosPorIdMedico(medico.getIdMedico());

        StringBuilder cadena = new StringBuilder();
        int i = 1;
        for (NodoCitaMedica nodo : citasPendientes) {
            Paciente paciente = nodo.CitaMedica.getPaciente();
            cadena.append(i++ + ". " + "Paciente: ").append(paciente.getNombre())
                    .append(" ").append(paciente.getApellido())
                    .append(" - Horario: ").append(nodo.CitaMedica.getHorario())
                    .append("\n");
        }
        txtMedico.setText(cadena.toString());
    }
    
    
    
//    public void agregarMedicosALista() {
//        // Limpiar los elementos existentes en el JComboBox
//        cbMedico.removeAllItems();
//
//        // Obtener la lista de m√©dicos como objetos Medico
//        List<Medico> listaMedicos = arbolMedico.getListaMedicos();
//
//        if (!listaMedicos.isEmpty()) {
//            // Agregar cada m√©dico (solo nombre, apellido y especialidad) al JComboBox
//            for (Medico medico : listaMedicos) {
//                try {
//                    int idMedico = medico.getIdMedico();
//                    String nombre = medico.getNombre();
//                    String apellido = medico.getApellido();
//                    //String especialidad = medico.getEspecialidad();
//                    //String turno = medico.getTurno().getCategoria();
//                    // Agregar el nombre, apellido y especialidad al JComboBox
//                    cbMedico.addItem(idMedico + " " + nombre + " " + apellido); // + " - " + especialidad + " - " + turno);
//                } catch (Exception e) {
//                    System.out.println("Error parsing medico: " + medico);
//                    e.printStackTrace();
//                }
//            }
//        } else {
//            cbMedico.addItem("No contamos con m√©dicos registrados");
//        }
//    }
    
//    private int obtenerIdMedicoSeleccionado() {
//        // Obtener el objeto seleccionado del JComboBox
//        Object selectedMedico = cbMedico.getSelectedItem();
//    
//        // Verificar si el objeto seleccionado es del tipo esperado
//        if (selectedMedico instanceof String) {
//            // Obtener el idMedico del String seleccionado en el formato "idMedico Nombre Apellido"
//            String selectedMedicoString = (String) selectedMedico;
//            int idMedico = Integer.parseInt(selectedMedicoString.split(" ")[0]);
//            return idMedico;
//        } else {
//            // Manejar el caso en que el objeto seleccionado no sea del tipo esperado
//            System.out.println("El objeto seleccionado no es del tipo esperado.");
//            return -1; // Retornar un valor predeterminado en caso de error
//        }
//    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(panelCitasPendientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(panelCitasPendientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(panelCitasPendientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(panelCitasPendientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new panelCitasPendientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnShow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtMedico;
    private javax.swing.JLabel txtMedicoActual;
    // End of variables declaration//GEN-END:variables
}
